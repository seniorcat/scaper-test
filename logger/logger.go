package logger

import (
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

// Log - глобальный логер, который по умолчанию инициализируется как no-op логер.
// Это означает, что до его явной инициализации он не будет выводить никаких сообщений.
var Log *zap.Logger = zap.NewNop()

// Initialize - функция для инициализации логера с заданным уровнем логирования.
// Она принимает уровень логирования в виде строки (debug, info, warn, error).
func Initialize(level string) error {
	// Преобразуем строку уровня логирования в формат Zap.
	lvl, err := zap.ParseAtomicLevel(level)
	if err != nil {
		return err // Если преобразование не удалось, возвращаем ошибку.
	}

	// Создаем конфигурацию для производственного логера.
	cfg := zap.NewProductionConfig()

	// Устанавливаем уровень логирования, который будет использоваться логером.
	cfg.Level = lvl

	// Настраиваем формат вывода времени в логах.
	cfg.EncoderConfig.EncodeTime = zapcore.TimeEncoderOfLayout("15:04:05 MST")

	// Отключаем вывод информации о местоположении вызова логера в коде.
	cfg.DisableCaller = true

	// Строим логер на основе конфигурации.
	zl, err := cfg.Build()
	if err != nil {
		return err // Если при построении логера возникла ошибка, возвращаем ее.
	}

	// Отложенное закрытие логера для освобождения ресурсов.
	defer zl.Sync()

	// Устанавливаем глобальный логер.
	Log = zl

	// Возвращаем nil, чтобы указать, что инициализация прошла успешно.
	return nil
}
